# Declarative Approach Example
# This single file defines the entire desired state
# It can be version controlled, reviewed, and reused

---
apiVersion: v1
kind: Namespace
metadata:
  name: declarative-demo
  labels:
    managed-by: declarative
    environment: demo

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  namespace: declarative-demo
  labels:
    app: nginx
    environment: demo
    managed-by: declarative
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.21
        ports:
        - containerPort: 80
          name: http
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5

---
apiVersion: v1
kind: Service
metadata:
  name: nginx
  namespace: declarative-demo
  labels:
    app: nginx
    managed-by: declarative
spec:
  type: ClusterIP
  selector:
    app: nginx
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
    name: http

# Benefits of this approach:
# - Everything defined in one place
# - Version controlled
# - Easy to review (pull requests)
# - Reproducible (kubectl apply -f)
# - Audit trail (Git history)
# - Rollback (git revert)
# - Self-documenting
