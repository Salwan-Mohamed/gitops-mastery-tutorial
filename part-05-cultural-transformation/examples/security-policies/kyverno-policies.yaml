# Kyverno Policy Examples for Transparent Security
# These policies are visible in Git for all teams to review

apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: require-pod-security-standards
  annotations:
    policies.kyverno.io/title: Require Pod Security Standards
    policies.kyverno.io/category: Pod Security
    policies.kyverno.io/severity: high
    policies.kyverno.io/description: >
      All pods must define security context to prevent privilege escalation.
      This policy is enforced across all namespaces except kube-system.
spec:
  validationFailureAction: enforce
  background: true
  rules:
  - name: check-security-context
    match:
      any:
      - resources:
          kinds:
          - Pod
    exclude:
      any:
      - resources:
          namespaces:
          - kube-system
          - argocd
    validate:
      message: "All pods must define security context with runAsNonRoot=true and allowPrivilegeEscalation=false"
      pattern:
        spec:
          containers:
          - securityContext:
              runAsNonRoot: true
              allowPrivilegeEscalation: false
              capabilities:
                drop:
                - ALL
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: block-privileged-containers
  annotations:
    policies.kyverno.io/title: Block Privileged Containers
    policies.kyverno.io/category: Pod Security
    policies.kyverno.io/severity: critical
    policies.kyverno.io/description: >
      Privileged containers are not allowed in production environments.
spec:
  validationFailureAction: enforce
  background: true
  rules:
  - name: check-privileged
    match:
      any:
      - resources:
          kinds:
          - Pod
    validate:
      message: "Privileged containers are not allowed"
      pattern:
        spec:
          containers:
          - =(securityContext):
              =(privileged): false
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: require-resource-limits
  annotations:
    policies.kyverno.io/title: Require Resource Limits
    policies.kyverno.io/category: Resource Management
    policies.kyverno.io/severity: medium
    policies.kyverno.io/description: >
      All containers must define resource requests and limits for CPU and memory.
spec:
  validationFailureAction: enforce
  background: true
  rules:
  - name: check-resources
    match:
      any:
      - resources:
          kinds:
          - Pod
    exclude:
      any:
      - resources:
          namespaces:
          - kube-system
    validate:
      message: "All containers must define resource requests and limits"
      pattern:
        spec:
          containers:
          - resources:
              requests:
                memory: "?*"
                cpu: "?*"
              limits:
                memory: "?*"
                cpu: "?*"
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: require-readonly-root-filesystem
  annotations:
    policies.kyverno.io/title: Require Read-Only Root Filesystem
    policies.kyverno.io/category: Pod Security
    policies.kyverno.io/severity: medium
    policies.kyverno.io/description: >
      Containers should use a read-only root filesystem when possible.
spec:
  validationFailureAction: audit  # Start with audit mode
  background: true
  rules:
  - name: check-readonly-root
    match:
      any:
      - resources:
          kinds:
          - Pod
    validate:
      message: "Containers should use readOnlyRootFilesystem=true"
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: block-nodeport-services
  annotations:
    policies.kyverno.io/title: Block NodePort Services
    policies.kyverno.io/category: Network Security
    policies.kyverno.io/severity: high
    policies.kyverno.io/description: >
      NodePort services expose applications on all nodes and should not be used
      in production. Use LoadBalancer or Ingress instead.
spec:
  validationFailureAction: enforce
  background: true
  rules:
  - name: block-nodeport
    match:
      any:
      - resources:
          kinds:
          - Service
    exclude:
      any:
      - resources:
          namespaces:
          - development
          - staging
    validate:
      message: "NodePort services are not allowed in production namespaces"
      pattern:
        spec:
          type: "!NodePort"